# cyclosafe package

Noeud central du projet.

Contient :
- l'ensemble des noeuds de capteur écrits en python, à savoir :
	- [**noeud caméra**](#camera_pipy) publiant des *sensor_msgs/msg/CompressedImg*
	- [**noeud gps**](#gpspy) publiant des *cyclosafe_interfaces/msg/NavSatInfo*
	- 4 noeuds pour différents sonars  publiant des *sensor_msgs/msg/Range*
		- [**sonar**](#sonarpy) pour la gamme MaxBotix USB
		- [**sonar_sr04**](#sonar_sr04py) pour le modèle SR04
		- [**sonar_lv_pw**](#sonar_lv_pwpy-obsolete) pour la gamme MaxBotix en mesurant la largeur des pulse (PWM)
		- [**sonar_rs232**](#sonar_rs232py) pour la gamme MaxBotix LV10X0
	- [**tof_lidar**](#tof_lidarpy) pour le lidar unidirectionnel de Waveshare publiant des *sensor_msgs/msg/Range*
- l'implémentation de classes utilisées par des noeuds ou d'autres packages :
	- [**ASerialSensor**](#aserialsensor) : modèle de noeud générique parsant des données envoyées via serial
	- [**ACamera**](#acamera) : modèle de noeud caméra0
	- [**Config**](#config) : destinée à l'intégration d'un node dans une launch description, pour uniformiser la déclaration des paramètres à travers plusieurs launch description
- la [**launch description**](#launch-configuration) permettant de lancer l'ensemble des noeuds ensembles.

# Noeuds executables

Chacun de ces noeuds peut-être executé independemment avec :

~~~
ros2 run cyclosafe [executable_sans_extension]
~~~

Pour lancer un noeud en précisant des paramètres :
~~~
ros2 run cyclosafe [executable] --ros-args [-p name1:=value -p name2:=value] [--log-level debug]
~~~

Pour débugger (si on utilise les fonctions debug de ROS) :
~~~
ros2 run cyclosafe [executable] --ros-args --log-level debug
~~~

Pour ajouter un namespace à l'executable (exemple: publier sur /lidar1/range au lieu de /range) :
~~~
ros2 run cyclosafe [executable] --ros-args -r __ns:=/lidar1
~~~

## gps.py

Hérite de ASerialPublisher.

Parse les frames NMEA envoyées par un serial device pour publier les informations suivantes sous forme de *cyclosafe_interfaces/msg/NavSatInfo* sur le topic **/gps**:

- **status** : no_fix, fix, fix (with GPS), fix (with GPS+Glonass), ...
- **latitude/longitude**: en format DDMM.MMMMM
- **altitude**: en mètres
- **hdop/pdop**
- **ground_speed**: en kilomètres/h
- **actives_sat***: nombre de satellites utilisés pour le fix

**Détail de l'interface** :

~~~
ros2 interface show cyclosafe_interfaces/msg/NavSatInfo
~~~

### Paramètres

> **port** : string
> - port serial sur lequel lire les données (défaut à */dev/ttyUSB0*)
> - **défaut** : */dev/ttyACM0*

> **baud** : int
> - baudrate du port serial 
> - **défaut** : *115200*

> **period** : float
> - interval auquel sont lues et parsées les données disponibles.
> - Seule la **première** donnée valide est prise en compte. Exemple : je lis des données envoyées à 10Hz sur un interval de 5Hz, j'aurais 5 données/secondes (et non pas 10 données réparties sur 5 lectures) et la position lue correspondra toujours à **la première position qui a pu être parsée** (pas nécessairement la dernière envoyéée par le capteur).
> - **défaut** : *0.5*
> - **unité** : secondes

> **start_time** : float
> - peut-être précisée dans le cadre d'une launch configuration pour référencer tous les noeuds sur un même départ. Non utilisée dans les faits car les timestamp attribués aux messages ne prennent pas compte de cette valeur.
> - **défaut** : *0.0*
> - **unité** : secondes depuis l'epoch

### Example

~~~
ros2 run cyclosafe gps --ros-args -p port:=/dev/ttyACM0 -p baud:=115200 -p period:=0.5

ros2 topic echo /gps
~~~

## sonar.py

Hérite de ASerialPublisher

Parse des distances lues sur une interface seriale sous la forme "RXXXX", et les publie sous forme de *sensor_msgs/msg/range* sur le topic **/range**.

### Paramètres

> **port** : string
> - port serial sur lequel lire les données (défaut à */dev/ttyUSB0*)
> - **défaut** : */dev/ttyUSB0*

> **baud** : int
> - baudrate du port serial 
> - **défaut** : *57600*

> **period** : float
> - interval auquel sont lues et parsées les données disponibles.
> - Seule la **dernière** donnée valide est prise en compte. Exemple : je lis des données envoyées à 10Hz sur un interval de 5Hz, j'aurais 5 données/secondes (et non pas 10 données réparties sur 5 lectures) et la distance lue correspondra toujours à **la distance la plus récente**.
> - **défaut** : *0.5*
> - **unité** : secondes

> **start_time** : float
> - peut-être précisée dans le cadre d'une launch configuration pour référencer tous les noeuds sur un même départ. Non utilisée dans les faits car les timestamp attribués aux messages ne prennent pas compte de cette valeur.
> - **défaut** : *0.0*
> - **unité** : secondes depuis l'epoch

> **unit** : string
> - Peut-être utilisé pour préciser une unité.
> - **accepte** : *mm*, *m*, *in* (inch)
> - **défaut** : *mm*

### Example

~~~
ros2 run cyclosafe sonar --ros-args -r __ns:=/sonar1 -p port:=/dev/ttyUSB0 -p baud:=57600 -p period:=0.2 -p unit:=mm

ros2 topic echo /sonar1/range
~~~



## sonar_sr04.py

## sonar_rs232.py

## sonar_lv_pw.py (obsolete)

## tof_lidar.py

## camera_pi.py

## camera_webcam.py (obsolete)

# Classes

## ASerialSensor

## ACamera

## Config

# Launch configuration


